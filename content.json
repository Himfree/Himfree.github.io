{"meta":{"title":"KeTing","subtitle":"","description":"","author":"Liu Keting","url":"http://example.com","root":"/"},"pages":[{"title":"关于作者","date":"2022-10-02T02:41:38.000Z","updated":"2022-10-02T02:42:24.595Z","comments":true,"path":"about/index.html","permalink":"http://example.com/about/index.html","excerpt":"","text":""},{"title":"友情链接","date":"2022-10-02T02:38:07.000Z","updated":"2022-10-02T02:38:45.960Z","comments":true,"path":"link/index.html","permalink":"http://example.com/link/index.html","excerpt":"","text":""},{"title":"标签","date":"2022-10-02T02:35:29.000Z","updated":"2022-10-02T02:37:41.406Z","comments":true,"path":"tags/index.html","permalink":"http://example.com/tags/index.html","excerpt":"","text":""},{"title":"分类","date":"2022-10-02T02:36:40.000Z","updated":"2022-10-02T02:37:43.707Z","comments":true,"path":"categories/index.html","permalink":"http://example.com/categories/index.html","excerpt":"","text":""}],"posts":[{"title":"开始第一章","slug":"开始第一章","date":"2022-10-01T22:44:56.000Z","updated":"2022-10-01T22:45:09.935Z","comments":true,"path":"2022/10/02/开始第一章/","link":"","permalink":"http://example.com/2022/10/02/%E5%BC%80%E5%A7%8B%E7%AC%AC%E4%B8%80%E7%AB%A0/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"","slug":"C++方向编程题答案","date":"2022-10-01T22:26:51.808Z","updated":"2022-10-02T00:48:09.353Z","comments":true,"path":"2022/10/02/C++方向编程题答案/","link":"","permalink":"http://example.com/2022/10/02/C++%E6%96%B9%E5%90%91%E7%BC%96%E7%A8%8B%E9%A2%98%E7%AD%94%E6%A1%88/","excerpt":"","text":"C++方向编程题答案第一周day1 100449-组队竞赛链接：https://www.nowcoder.com/questionTerminal/6736cc3ffd1444a4a0057dee89be789b?orderByHotValue=1&amp;page=1&amp;onlyReference=false 【题目解析】：队伍的水平值等于该队伍队员中第二高水平值，为了所有队伍的水平值总和最大的解法，也就是说每个队伍的第二个值是尽可能大的值。所以实际值把最大值放到最右边，最小是放到最左边。 【解题思路】： 本题的主要思路是贪心算法，贪心算法其实很简单，就是每次选值时都选当前能看到的局部最解忧，所以这里的贪心就是保证每组的第二个值取到能选择的最大值就可以，我们每次尽量取最大，但是最大的数不可能是中位数，所以退而求其次，取 每组中第二大的 例如 现在排序后 有 1 2 5 5 8 9 ，那么分组为1 8 9 和 2 5 5 关系arr[arr.length-2*(i+1)] 1234567891011121314151617181920212223242526#include&lt;iostream&gt;#include&lt;algorithm&gt;#include&lt;vector&gt;using namespace std;int main()&#123; // IO型OJ可能会有多组测试用例，所以这里要持续接收输入多组测试用例。 int n; while (cin &gt;&gt; n) &#123; long long sum = 0; vector&lt;int&gt; a; a.resize(3*n); for (int i = 0; i &lt; (3 * n); i++) &#123; cin &gt;&gt; a[i]; &#125; std::sort(a.begin(), a.end()); for (int i = 0; i &lt; n; i++) &#123; sum+=a[a.size()-(2*(i+1))]; &#125; cout &lt;&lt; sum &lt;&lt; endl; &#125;&#125; 69390-删除公共字符链接：https://www.nowcoder.com/practice/f0db4c36573d459cae44ac90b90c6212?tpId=85&amp;&amp;tqId=29868&amp;rp=1&amp;ru=/activity/oj&amp;qru=/ta/2017test/question-ranking 【题目解析】：本题描述很简单，题目描述很清楚，读题即可 【解题思路】：本题如果使用传统的暴力查找方式，如判断第一个串的字符是否在第二个串中，在再挪动字符删除这个字符的方式，效率为O(N^2)，效率太低，很难让人满意。 将第二个字符串的字符都映射到一个hashtable数组中，用来判断一个字符在这个字符串。 判断一个字符在第二个字符串，不要使用删除，这样效率太低，因为每次删除都伴随数据挪动。这里可以考虑使用将不在字符添加到一个新字符串，最后返回新新字符串。 12345678910111213141516171819202122232425262728293031323334#include&lt;iostream&gt;#include&lt;string&gt;using namespace std;int main()&#123; // 注意这里不能使用cin接收，因为cin遇到空格就结束了。 // oj中IO输入字符串最好使用getline。 string str1,str2; //cin&gt;&gt;str1; //cin&gt;&gt;str2; getline(cin, str1); getline(cin, str2); // 使用哈希映射思想先str2统计字符出现的次数 int hashtable[256] = &#123;0&#125;; for(size_t i = 0; i &lt; str2.size(); ++i) &#123; hashtable[str2[i]]++; &#125; // 遍历str1，str1[i]映射hashtable对应位置为0，则表示这个字符在 // str2中没有出现过，则将他+=到ret。注意这里最好不要str1.erases(i) // 因为边遍历，边erase，容易出错。 string ret; for(size_t i = 0; i &lt; str1.size(); ++i) &#123; if(hashtable[str1[i]] == 0) ret += str1[i]; &#125; cout&lt;&lt;ret&lt;&lt;endl; return 0;&#125;","categories":[],"tags":[]},{"title":"Hello World","slug":"hello-world","date":"2022-10-01T14:42:02.324Z","updated":"2022-10-01T22:45:09.933Z","comments":true,"path":"2022/10/01/hello-world/","link":"","permalink":"http://example.com/2022/10/01/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}],"categories":[],"tags":[]}